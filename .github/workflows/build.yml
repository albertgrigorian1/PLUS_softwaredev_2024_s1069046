name: Build macOS Universal App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest  # Wir verwenden macOS-Runner für die Erstellung der .app-Datei

    steps:
    # Checkout der Repository-Dateien
    - name: Checkout repository
      uses: actions/checkout@v3

    # Installiere Python und Abhängigkeiten
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'  # Python-Version anpassen, falls notwendig

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install img2pdf pandas pyinstaller  # Installiere die benötigten Bibliotheken

    # Erstelle die Binärdatei für x86_64
    - name: Build macOS app for x86_64
      run: |
        arch -x86_64 pyinstaller --onefile --windowed --name "BewerberPDFs_x86_64" --distpath ./dist_x86_64 --workpath ./build_x86_64 bewerber_pdfs.py

    # Erstelle die Binärdatei für arm64
    - name: Build macOS app for arm64
      run: |
        arch -arm64 pyinstaller --onefile --windowed --name "BewerberPDFs_arm64" --distpath ./dist_arm64 --workpath ./build_arm64 bewerber_pdfs.py

    # Kombiniere die Binärdateien zu einer universellen Binärdatei
    - name: Create universal binary
      run: |
        lipo -create -output ./dist/BewerberPDFs ./dist_x86_64/BewerberPDFs_x86_64 ./dist_arm64/BewerberPDFs_arm64

    # Archive das Ergebnis als Artefakt
    - name: Archive universal binary
      uses: actions/upload-artifact@v4
      with:
        name: BewerberPDFs-universal
        path: ./dist/BewerberPDFs  # Der Pfad zur erstellten universellen Binärdatei
